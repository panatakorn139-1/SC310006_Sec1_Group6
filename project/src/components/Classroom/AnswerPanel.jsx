import { useState, useEffect } from "react";
import { db } from "../../config/db/firebase";
import { collection, getDocs, doc, getDoc } from "firebase/firestore";
import Swal from "sweetalert2";
import "./AnswerPanel.css";

const AnswerPanel = ({ cid, cno, onClose }) => {
  const [answersData, setAnswersData] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAnswers = async () => {
      setLoading(true);
      try {
        console.log("üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cid:", cid, "cno:", cno);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        const studentsRef = collection(db, `classroom/${cid}/checkin/${cno}/answers/1/students`);
        const studentsSnap = await getDocs(studentsRef);

        let answers = studentsSnap.docs.map((docSnap) => ({
          stdid: docSnap.id, // ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
          ...docSnap.data(),
        }));

        console.log("‚úÖ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î:", answers);

        // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å `classroom/{cid}/students/{stdid}`
        const studentNames = await Promise.all(
          answers.map(async (answer) => {
            const studentDoc = await getDoc(doc(db, `classroom/${cid}/students`, answer.stdid));
            return {
              ...answer,
              name: studentDoc.exists() ? studentDoc.data().name : "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠", // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"
            };
          })
        );

        setAnswersData(studentNames);
      } catch (error) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:", error);
        Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ", "error");
      } finally {
        setLoading(false);
      }
    };

    fetchAnswers();
  }, [cid, cno]);

  return (
    <div className="answer-panel">
      <h3>‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠: {cno})</h3>
      {loading ? (
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö...</p>
      ) : (
        <>
          {answersData.length > 0 ? (
            <table>
              <thead>
                <tr>
                  <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</th> {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡∏ô‡∏£‡∏´‡∏±‡∏™ */}
                  <th>‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö</th>
                  <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á</th>
                </tr>
              </thead>
              <tbody>
                {answersData.map((answer, index) => (
                  <tr key={answer.stdid}>
                    <td>{index + 1}</td>
                    <td>{answer.name}</td> {/* ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤ */}
                    <td>{answer.text || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"}</td>
                    <td>
                      {answer.time && answer.time.toDate
                        ? new Date(answer.time.toDate()).toLocaleString()
                        : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ</p>
          )}
        </>
      )}
      <button onClick={onClose} className="btn-secondary">‡∏≠‡∏≠‡∏Å</button>
    </div>
  );
};

export default AnswerPanel;
