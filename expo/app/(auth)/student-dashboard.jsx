import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  FlatList,
  StyleSheet,
  ActivityIndicator,
  Alert,
  Modal,
  TextInput,
} from "react-native";
import { useRouter } from "expo-router";
import { Camera, CameraView } from "expo-camera";
import { auth, db } from "../../assets/services/firebaseConfig";
import {
  collection,
  getDocs,
  doc,
  getDoc,
  setDoc,
  updateDoc,
  serverTimestamp,
} from "firebase/firestore";
import AnswerQuestionModal from "./AnswerQuestionModal"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ component ‡πÉ‡∏´‡∏°‡πà

export default function StudentDashboard() {
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [classrooms, setClassrooms] = useState([]);
  const [hasPermission, setHasPermission] = useState(null);
  const [scanned, setScanned] = useState(false);
  const [cameraOpen, setCameraOpen] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [classroomIdInput, setClassroomIdInput] = useState("");
  const [answerModalVisible, setAnswerModalVisible] = useState(false);
  const [selectedClassroom, setSelectedClassroom] = useState(null);

  useEffect(() => {
    fetchClassrooms();
  }, []);

  useEffect(() => {
    (async () => {
      const { status } = await Camera.requestCameraPermissionsAsync();
      setHasPermission(status === "granted");
    })();
  }, []);

  const fetchClassrooms = async () => {
    try {
      setLoading(true);
      const user = auth.currentUser;
      if (!user) {
        Alert.alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
        router.replace("/login");
        return;
      }
      const studentRef = collection(db, `users/${user.uid}/classroom`);
      const querySnapshot = await getDocs(studentRef);
      const classroomData = [];
      for (const classDoc of querySnapshot.docs) {
        const cid = classDoc.id;
        const infoRef = doc(db, `classroom/${cid}/info`, "infoDoc");
        const infoSnap = await getDoc(infoRef);
        if (infoSnap.exists()) {
          classroomData.push({
            id: cid,
            ...infoSnap.data(),
            status: classDoc.data().status,
          });
        }
      }
      setClassrooms(classroomData);
    } catch (error) {
      console.error("Fetch classrooms error:", error);
      Alert.alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ: " + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleBarCodeScanned = async ({ data }) => {
    setScanned(true);
    setCameraOpen(false);
    try {
      const user = auth.currentUser;
      if (!user) {
        Alert.alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
        return;
      }

      const url = new URL(data);
      const cid = url.pathname.split("/")[2];
      const joinParam = url.searchParams.get("join");

      if (joinParam === "true") {
        await joinClassroom(user, cid);
        router.push(`/classroom/${cid}`);
      } else {
        Alert.alert("‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "QR Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      }
    } catch (error) {
      console.error("Scan QR error:", error);
      Alert.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ: " + error.message);
    }
  };

  const joinClassroom = async (user, cid) => {
    try {
      console.log("Joining classroom with CID:", cid);
      const infoRef = doc(db, `classroom/${cid}/info`, "infoDoc");
      const infoSnap = await getDoc(infoRef);
      console.log("Info snapshot exists:", infoSnap.exists(), "Data:", infoSnap.data());

      if (!infoSnap.exists()) {
        Alert.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", `‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${cid} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
        return;
      }

      const studentRef = doc(db, `classroom/${cid}/students`, user.uid);
      const studentSnap = await getDoc(studentRef);

      if (!studentSnap.exists()) {
        await setDoc(studentRef, {
          stdid: user.uid,
          name: user.displayName || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠",
          status: 0,
        });

        await setDoc(doc(db, `users/${user.uid}/classroom`, cid), {
          status: 2,
        });

        Alert.alert("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå");
        fetchClassrooms();
      } else {
        Alert.alert("üìå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß");
      }
    } catch (error) {
      console.error("Join classroom error:", error);
      Alert.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ: " + error.message);
    }
  };

  const handleAddClassroom = async () => {
    const trimmedClassroomId = classroomIdInput.trim();
    console.log("Attempting to join classroom with ID:", trimmedClassroomId);

    if (!trimmedClassroomId) {
      Alert.alert("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
      return;
    }

    try {
      const user = auth.currentUser;
      if (!user) {
        Alert.alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
        return;
      }

      await joinClassroom(user, trimmedClassroomId);
      setModalVisible(false);
      setClassroomIdInput("");
      router.push(`/classroom/${trimmedClassroomId}`);
    } catch (error) {
      console.error("Add classroom error:", error);
      Alert.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ: " + error.message);
    }
  };

  const openAnswerModal = (classroom) => {
    setSelectedClassroom(classroom);
    setAnswerModalVisible(true);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</Text>

      {loading ? (
        <ActivityIndicator size="large" color="#007bff" />
      ) : classrooms.length > 0 ? (
        <FlatList
          data={classrooms}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => (
            <TouchableOpacity
              style={styles.classroomCard}
              onPress={() => router.push(`/classroom/${item.id}`)}
            >
              <View style={styles.classroomHeader}>
                <Text style={styles.classroomTitle}>{item.name}</Text>
                <Text style={styles.classroomCode}>‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤: {item.code}</Text>
              </View>
              <Text style={styles.classroomRoom}>
                ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: {item.room || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
              </Text>
              <TouchableOpacity
                style={styles.answerButton}
                onPress={() => openAnswerModal(item)}
              >
                <Text style={styles.buttonText}>‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°</Text>
              </TouchableOpacity>
            </TouchableOpacity>
          )}
        />
      ) : (
        <Text style={styles.noClassText}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>
      )}

      <TouchableOpacity
        style={styles.scanButton}
        onPress={() => {
          setScanned(false);
          setCameraOpen(true);
        }}
      >
        <Text style={styles.buttonText}>‡∏™‡πÅ‡∏Å‡∏ô QR Code</Text>
      </TouchableOpacity>

      <TouchableOpacity
        style={styles.addButton}
        onPress={() => setModalVisible(true)}
      >
        <Text style={styles.buttonText}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏á</Text>
      </TouchableOpacity>

      <Modal visible={cameraOpen} animationType="slide">
        <View style={styles.cameraContainer}>
          <CameraView
            barcodeScannerSettings={{ barCodeTypes: ["qr"] }}
            onBarcodeScanned={scanned ? undefined : handleBarCodeScanned}
            style={styles.camera}
          />
          <TouchableOpacity
            style={styles.closeButton}
            onPress={() => setCameraOpen(false)}
          >
            <Text style={styles.buttonText}>‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á</Text>
          </TouchableOpacity>
        </View>
      </Modal>

      <Modal visible={modalVisible} animationType="slide" transparent={true}>
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà</Text>
            <TextInput
              style={styles.input}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (CID)"
              value={classroomIdInput}
              onChangeText={setClassroomIdInput}
            />
            <TouchableOpacity
              style={styles.confirmButton}
              onPress={handleAddClassroom}
            >
              <Text style={styles.buttonText}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.cancelButton}
              onPress={() => setModalVisible(false)}
            >
              <Text style={styles.buttonText}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      {answerModalVisible && (
        <AnswerQuestionModal
          classroom={selectedClassroom}
          onClose={() => setAnswerModalVisible(false)}
        />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#f9f9f9",
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  classroomCard: {
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 12,
    marginBottom: 15,
    borderLeftWidth: 5,
    borderLeftColor: "#007bff",
  },
  classroomHeader: {
    marginBottom: 10,
  },
  classroomTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#007bff",
  },
  classroomCode: {
    fontSize: 14,
    color: "#555",
  },
  classroomRoom: {
    fontSize: 14,
    color: "#666",
    fontStyle: "italic",
  },
  answerButton: {
    backgroundColor: "#17a2b8",
    padding: 10,
    borderRadius: 8,
    alignItems: "center",
    marginTop: 10,
  },
  noClassText: {
    fontSize: 16,
    color: "#555",
    textAlign: "center",
  },
  scanButton: {
    backgroundColor: "#28a745",
    padding: 15,
    borderRadius: 8,
    alignItems: "center",
    marginTop: 20,
  },
  addButton: {
    backgroundColor: "#007bff",
    padding: 15,
    borderRadius: 8,
    alignItems: "center",
    marginTop: 10,
  },
  buttonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  cameraContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#000",
  },
  camera: {
    width: "100%",
    height: "80%",
  },
  closeButton: {
    backgroundColor: "red",
    padding: 15,
    borderRadius: 8,
    alignItems: "center",
    marginTop: 20,
  },
  modalContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
  },
  modalContent: {
    width: "80%",
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 10,
    alignItems: "center",
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 20,
  },
  input: {
    width: "100%",
    padding: 10,
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    marginBottom: 20,
  },
  confirmButton: {
    backgroundColor: "#28a745",
    padding: 15,
    borderRadius: 8,
    alignItems: "center",
    width: "100%",
    marginBottom: 10,
  },
  cancelButton: {
    backgroundColor: "#dc3545",
    padding: 15,
    borderRadius: 8,
    alignItems: "center",
    width: "100%",
  },
});